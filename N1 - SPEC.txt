+---------------------------------------------+
|                                             |
|   #   #   #           ###  ###  ####  ###   |
|   ##  #  ##          #     #  # #    #      |
|   # # #   #   #####   ###  ###  ###  #      |
|   #  ##   #              # #    #    #      |
|   #   #  ###          ###  #    ####  ###   |
|                                             |
+---------------------------------------------+
Copyright Nikocraft 2022 - All rights reserved.


------------
  OVERVIEW
------------

- 8 bit CPU architecture
- 16 bit memory address (64 KiB memory)
- 256 16 KiB (14 bit) memory banks possible
  (4243456 bytes total addressable space)
- 32 instruction types
- 1-3 byte instruction size
- 256 I/O Ports



---------------
  INSTRUCTION
---------------

--- Layout ---

XXXXX YYY [ZZZZZZZZ] [ZZZZZZZZ]
X: 5 bit       instruction type
Y: 3 bit       register argument | empty               [Arg1]
Z: 0/8/16 bit  register argument | immediate argument  [Arg2]


--- Types ---

ID   Binary  Hex   Name      Arg1      Arg2      Size   Type    Action
-------------------------------------------------------------------------------------------------
0    00000   00    MVI       reg       imm8      2      MEMORY  r(A1) = A2
1    00001   01    MVR       reg       reg       2      MEMORY  r(A1) = r(A2)
2    00010   02    LDA       reg       imm16     3      MEMORY  r(A1) = a(A2)
3    00011   03    LDHL      reg       -         1      MEMORY  r(A1) = a(r(HL))
4    00100   04    STA       reg       imm16     3      MEMORY  a(A2) = r(A1)
5    00101   05    STHL      reg       -         1      MEMORY  a(r(HL)) = r(A1)
6    00110   06    PUSHI     -         imm8      2      STACK   STACK+ = A2
7    00111   07    PUSHR     reg       -         1      STACK   STACK+ = r(A2)
8    01000   08    POP       reg       -         1      STACK   r(A1) = STACK-
9    01001   09    NOP       -         -         1      -       NOP
10   01010   0A    JNZ       reg       -         1      PC      PC = r(HL) if r(A1) != 0 else NOP
11   01011   0B    JMP       -         -         1      PC      PC = r(HL)
12   01100   0C    INI       reg       imm8      2      I/O     r(A1) = p(A2)
13   01101   0D    INR       reg       reg       2      I/O     r(A1) = p(r(A2))
14   01110   0E    OUTI      reg       imm8      2      I/O     p(A2) = r(A1)
15   01111   0F    OUTR      reg       reg       2      I/O     p(r(A2)) = r(A1)
16   10000   10    ADDI^     reg       imm8      2      ALU     r(A1) = r(A1) + A2
17   10001   11    ADDR^     reg       reg       2      ALU     r(A1) = r(A1) + r(A2)
18   10010   12    ADCI^     reg       imm8      2      ALU     r(A1) = r(A1) + A2 + CARRY
19   10011   13    ADCR^     reg       reg       2      ALU     r(A1) = r(A1) + r(A2) + CARRY
20   10100   14    ANDI      reg       imm8      2      ALU     r(A1) = r(A1) & A2
21   10101   15    ANDR      reg       reg       2      ALU     r(A1) = r(A1) & r(A2)
22   10110   16    ORI       reg       imm8      2      ALU     r(A1) = r(A1) | A2
23   10111   17    ORR       reg       reg       2      ALU     r(A1) = r(A1) | r(A2)
24   11000   18    NORI      reg       imm8      2      ALU     r(A1) = !(r(A1) | A2)
25   11001   19    NORR      reg       reg       2      ALU     r(A1) = !(r(A1) | r(A2))
26   11010   1A    CMPI^     reg       imm8      2      ALU     FLAGS = r(A1) <=> A2
27   11011   1B    CMPR^     reg       reg       2      ALU     FLAGS = r(A1) <=> r(A2)
28   11100   1C    SBBI^     reg       imm8      2      ALU     r(A1) = r(A1) - A2 - BORROW
29   11101   1D    SBBR^     reg       reg       2      ALU     r(A1) = r(A1) - r(A2) - BORROW
30   11110   1E    SHL^      reg       -         1      ALU     r(A1) = r(A1) << 1
31   11111   1F    SHR^      reg       -         1      ALU     r(A1) = r(A1) >> 1

* Operation NOP (01001) is not recommeded to be used and reserved for the future.



------------
  REGISTER
------------

--- General ---

ID   Binary  Hex   Usage
--------------------------------------------------
0    000     A     GP
1    001     B     GP
2    010     C     GP
3    011     D     GP
4    100     L     GP | Low Index
5    101     H     GP | High Index
6    110     Z     GP | Return
7    111     F     Flags (LESS/EQUAL/CARRY/BORROW)



----------
  MEMORY
----------

--- Address Space ---

Address             Usage
----------------------------------------------------------------
0x0000..0x7FFF      Program Instruction/Resource ROM (READ-ONLY)
0x8000..0xBFFF      Banked RAM (see Banking)
0xC000..0xEFFF      General Purpose RAM
0xF000..0xFFEF      Stack (PUSH/POP-ACCESS-ONLY)
0xFFF0..0xFFFA      UNUSED
0xFFFB..0xFFFB      Memory Bank Pointer
0xFFFC..0xFFFD      Stack Pointer
0xFFFE..0xFFFF      Program Counter (READ-ONLY)


--- Banking ---

ID   Binary      Hex   Usage
------------------------------------------
0    00000000    00    General Purpose RAM
1    00000001    01    GPU VRAM



-------
  I/O
-------

--- Ports ---

ID   Binary      Hex   Usage
----------------------------------
0    00000000    00    Exit
1    00000001    01    GPU


--- Exit ---

- Exit Code Output
- Stops clock

EXIT CODES

ID   Binary      Hex   Error
---------------------------------------
0    00000000    00    Clean
1    00000001    01    Unknown
2    00000010    02    Stack Overflow
3    00000011    03    Stack Empty
4    00000100    04    Read-only Access
5    00000101    05    Invalid Bank
6    00000110    06    Invalid Address


--- GPU ---

# Coming Soon



------------
  ASSEMBLY
------------

--- Syntax ---

GENERAL

Blank lines and leading/trailing whitespaces are ignored.

A program can have multiple modules. One of these is the main module,
which includes and execute the others. A module has two sections:
definition and code.

The definition section contains includes, exports, constants, variables,
resources and macros. It goes from the start of the module file until
the code keyword.

After it comes the code section, which contains labels and instructions.
Every programs main module must have the label 'main'. Before the first
instruction of the main module, the instruction 'jmp main' is inserted
by the assembler. The last instruction of every module needs to be a
output to the exit port or a return statement, else a error is thrown.

NAMES

Label, constant, variable, resource and macro names are only allowed
to have alphabetic charaters and numbers. Additionally underscores '_'
and periods '.' are allowed. It is recommended to use snake case. While
labels and variables should only use lowercase characters, e.g. hello_world,
constants, resources and macros use uppercase characters, e.g. HELLO_WORLD.
The names also can't to start with a number. The keywords 'include',
'export', 'const', 'var', 'res', 'code' and register values 'a', 'b',
'c', 'd', 'h', 'l' 'z', 'f' are reserved.

VALUES

Values can be decimal, hex, octal and binary. Just a number means decimal,
while '0[type][value]' is used for the other types. The type char for hex is
'x', 'o' for octal and 'b' for binary. Hint: Underscores '_' can be placed
in the values, to improve readability. They are ignored by the assembler.
Labels, constants, variables, resources and registers can be used by their
names.

Decimal Examples:
42
1_337

Hex Examples:
0x40
0x_e5_f2

Octal Examples:
0o87
0o_48_57

Binary Examples:
0b01010001
0b_1011_1010_1011_1110

Register Examples:
a
h

COMMENTS

Everything after a ';' in a line is ignored by the assembler.

Normal Comment Example:
; The hole line is ignored.

Inline Comment Example:
mvi     a, 0xFF  ; A inline comment after a valid instruction

INSTRUCTIONS

Every instruction starts with a name to identify the type. They can be
default instructions or built-in/custom macros. Most instructions also
need some arguments, so they are followed after a space ' '. If there
are more than one argument, they are separated by commas ','. Leading,
trailing and duplicated spaces are ignored. It is recommended to align
the arguments of all instructions in the same column (for example 8).
Instructions need to be in the code section.

No Argument Instruction Example:
jmp

Single Argument Instruction Examples:
pop     a
jnz     z

Multiple Argument Instruction Examples:
lda     d, 0xC000
addi    c, 42
sbbr    b, h

LABELS

Labels have three different types: macros, functions and normal labels.
The type is defined with a decorator, which starts with '@', above the
label. It is recommended to indent (4 spaces) the content of the label.

A normal label is just a definition of a instruction address, which can
be used to jump to. It has no decorator. They need to be in the code
section.

Functions are a little more complex. They are used to be called instead
of jumping to them. Calling means, that on calling a function, the
current program counter value is pushed to the stack, before jumping to
the target. At the end of the function the return instruction is executed,
so the original address is poped from the stack and jumped to. A label
is marked as a function with the decorator '@func'. Functions are defined
in the code section too. It is recommended to leave a blank line after it.

The last type is a macro. It is just a code snippet, which is placed into
the program by the assembler. After definition it is handled like a
instruction, which can be used like any default instruction. It can also
has arguments. They are defined between the label name and the colon. The
arguments have the following layout: '%[type][id]'. The argument type can be
'r' for a register, 'i' for an 8-bit immediate and 'a' for an 16-bit
immediate/address. After definition the arguments can be used with the
same format within the macro. A macro need to be defined in the definition
section and ends with a other definition, the next macro or the start
of the code section. '@macro' is the decorator used.

Normal Label Example:
main:
    mvi     a, 0
    outi    a, 0

Function Example:
@func
update_screen:
    mvi     a, 0
    outi    a, 1
    ret

Macro Example:
@macro
inc16 %r1, %r2:
    addi    %r1, 1
    adci    %r2, 0

CONSTANTS

Constants are an alias for an specific value, that not change. On compiling
all usages are replaced with the assigned value. They are defined in the
definition section and the keyword 'const'. The name of the constant follows
after a whitespace ' '. At the end we need the value to assign, which is also
separated with a space.

Constant Definition Examples:
const THE_ANSWER_OF_THE_UNIVERSE 42
const HELLO_WORLD 0x40

VARIABLES

Variables are similar to constants, but they don't define a fixed value.
Instead they allocate a region in memory and all references are replaced
with the address to it. The keyword is 'var' and the last value is the
size (in bytes) of the space to allocate, instead of the value.

Variable Definition Examples:
var counter 1
var vector_3d 3

RESOURCES

The last definition is a resource, which is like a variable, but read only.
Instead of allocating a region in memory, there value is appended to the end
of the program code. References are replaced with the address to it too.
The keyword is 'res' and the last value can be anything.

Resource Definition Examples:
res HELLO_WORLD_TEXT "Hello world!"
res UI_LAYOUT = 0x434e_a23f_8b9c_99fd

INCLUDES

To include exported things from another module, the 'include' keyword is used.
It has 1 argument, which is the path to the module. The path can be a absolute
path, relative path (always from main module file), or the name of a built-in
module. The '.asm'/'.asmn1' extension is not necessary. It should be used in the
definition section above the constants, variables, resources, macros and exports.
If a overlap in namespace exists, the local version is used. Hint: If the path
contains whitespaces or non alphabetic/numeric characters, quotes " or ' are
used to surround it.

Include Examples:
include utils/display
include player
include "C:/Users/Hello World/test/1"

EXPORTS

By default everything is private in a module and not available after including.
To make a label, constant, variable, resource or macro includable, the 'export'
keyword is used. Equivalent to include, it has 1 argument. It is just the name
of the thing to be exported. A export also need to be in the definition section.
It is not recommended, but if you want to make everything public, you can use
a asterisk. But be careful with this, because it can fill the namespace full
of garbage quickly.

Export Examples:
export render
export message
export *

-- Assembler --

The assembler is written in python. It takes the path of the main file as an
argument and import it as a module.

Every module first get tokenized. Then the tokens are parsed into includes,
exports, variables, constants, resources, labels, macros and instructions.
After the namespace is generated, the modules to include are imported.
All modules are saved in a dictionary together with their path. If a module
is included, that is already imported, it is used instead of importing
it again. In the next step, the instructions are verified. After that, all
references are replaced with there values. At the end all macros are inserted.

Now we are ready to encode the program. And after a little bit of magic, the output
is a '.n1' text file with 0s and 1s representing a binary executable.

If the flag '-m' is given, a minecraft schematic is generated. It puts redstone
blocks on specific positions, depending on the content of the '.n1' file, so
that it can pasted into a rom. The output is a '.schem' file.

By default, the assembler exits, if the output files already exists. To override
them, use the '-o' flag.

To get detailted debug information, the '-d' flag can be used. It prints additional
information to console and generates '.txt' text files for all modules in a debug
directory with all data of each step in the assembling process.

To regenerate the source code from a executable, the '-r' flag is used. Instead
of assembling the given file, a '.n1' file is expected, which is used to generate
a basic version of the original source code.

